{
   static class Triagle
    {
        public static double S(double a, double b, double c)
        {
            if (a < b + c && b < a + c && c < a + b)
            {
                double p = (a + b + c) / 2;
                return Math.Sqrt(p * (p - a) * (p - b) * (p - c));
            }
            return 0;
        }
    }
}

{
    static class MyClass
    {
        public static int Sum(int m, int n)
        {
            int Sum = 0;
            for (int i = m; i <= n; i++)
            {
                Sum += i;
            }
            return Sum;
        }
    }
}

{
    static class MyClass2
    {
        public static double Averanger(int m, int n)
        {
            int sum = 0;
            int count = 0;
            for (int i = m; i <= n; i++)
            {
                sum += i;
                count++;            
            }
            return (double)sum / count;
        }
    }
}

{
    class Zakaz
    {
        string fam;
        int size;
        string comfort;

        public string Fam
        {
            get { return fam; }
            set { fam = value; }
        }

        public int Size
        {
            get { return size; }
            set { size = value; }
        }

        public string Comfort
        {
            get { return comfort; }
            set { comfort = value; }
        }

        public Zakaz()
        {

        }

        public Zakaz(string fam)
        {
            Fam = fam;
        }

        public Zakaz(string fam, int size)
          :this(fam)
        {
            Size = size;
        }

        public Zakaz(string fam, int size, string comfort)
          :this(fam, size)
        {
            Comfort = comfort;
        }

        public void Show()
        {
            Console.WriteLine($"Фамилия - {fam}, Количество мест в номере - {size}, Комфортность - {comfort}");
        }
    }
}

{
    /// <summary>
    /// Абстрактный класс Vehicle
    /// </summary>
    abstract class Vehicle
    {
        /// <summary>
        /// Поле price
        /// </summary>
        private double price;

        /// <summary>
        /// Поле speed
        /// </summary>
        private double speed;

        /// <summary>
        /// Поле dateTime
        /// </summary>
        private DateTime dateTime;

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Vehicle()
        {

        }

        /// <summary>
        /// Конструктор с тремя параметрами
        /// </summary>
        /// <param name="price"></param>
        /// <param name="speed"></param>
        /// <param name="datetime"></param>
        public Vehicle(double price, double speed, DateTime datetime)
        {
            this.price = price;
            this.speed = speed;
            this.dateTime = datetime;
        }

        /// <summary>
        /// Свойство Price
        /// </summary>
        public double Price { get {return price; } set { price = value; } }
        
        /// <summary>
        /// Свойство Speed
        /// </summary>
        public double Speed { get {return speed; } set { speed = value; } }
        
        /// <summary>
        /// Свойство DateTime
        /// </summary>
        public DateTime DateTime { get {return dateTime; } set { dateTime = value; } }

        /// <summary>
        /// Абстрактный метод для информации
        /// </summary>
        abstract public void Info(); 
    }
}

{
    /// <summary>
    /// Статический класс Pattern
    /// </summary>
    static class Pattern
    {
        /// <summary>
        /// Хранение данных цветов
        /// </summary>
       public enum Colors
        {
            Black,
            Blue,
            Green,
            Yellow,
            Red,
            Magenta,
            Cyan,
            White
        }

        /// <summary>
        /// Статический метод Print
        /// </summary>
        /// <param name="stroka">строка</param>
        /// <param name="color">цвет</param>
        public static void Print(string stroka, int color)
        {
            switch ((Colors)color)
            {
                case Colors.Black:
                    Console.ForegroundColor = ConsoleColor.Black;
                    break;
                case Colors.Blue:
                    Console.ForegroundColor = ConsoleColor.Blue;
                    break;
                case Colors.Green:
                    Console.ForegroundColor = ConsoleColor.Green;
                    break;
                case Colors.Yellow:
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    break;
                case Colors.Red:
                    Console.ForegroundColor = ConsoleColor.Red;
                    break;
                case Colors.Magenta:
                    Console.ForegroundColor = ConsoleColor.Magenta;
                    break;
                case Colors.Cyan:
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    break;
                case Colors.White:
                    Console.ForegroundColor = ConsoleColor.White;
                    break;
            }
            Console.WriteLine(stroka);
        }
    }
}


{
    class Program
    {
        static void Main(string[] args)
        {
/// <summary>
/// 1.Объявляю делегат
/// </summary>
/// <param name="a"></param>
/// <param name="b"></param>
/// <param name="c"></param>
/// <returns>площедь треугольника</returns>
delegate double Message(double a, double b, double c);

/// <summary>
/// 1.Объявяляю делегат
/// </summary>
/// <param name="m"></param>
/// <param name="n"></param>
/// <returns>сумму чисел от m до n</returns>
delegate int Message2(int m, int n);

/// <summary>
/// 1.Объявляю делегат
/// </summary>
/// <param name="m"></param>
/// <param name="n"></param>
/// <returns>Среденее арефметическое</returns>
delegate double Averages(int m, int n);


            Plane plane = new Plane();
            plane.Price = double.Parse(Console.ReadLine());
            plane.Speed = double.Parse(Console.ReadLine());
            plane.DateTime = DateTime.Parse(Console.ReadLine());
            plane.H = int.Parse(Console.ReadLine());
            plane.Person = int.Parse(Console.ReadLine());
            Car car = new Car();
            Ship ship = new Ship();

            Console.WriteLine("Введите строку: ");
            string stroka = Console.ReadLine();
            Console.WriteLine("Введите цвет который вы желаете: ");
            foreach (Pattern.Colors colors in Enum.GetValues(typeof(Pattern.Colors)))
            {
                Console.WriteLine($"{(int)colors} - {colors}");
            }
            Console.WriteLine("Введите цифру: ");
            int numbcolor = int.Parse(Console.ReadLine());
            Pattern.Print(stroka, numbcolor);
            Console.ReadLine();
   }
}

