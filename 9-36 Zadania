  class ClassRoom
    {
        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public ClassRoom()
        {

        }

        /// <summary>
        /// Конструктор с одним параметром
        /// </summary>
        /// <param name="exclentpupli">отлично-учится</param>
        public ClassRoom(Pupil exclentpupli)
        {
            
        }

        /// <summary>
        /// Конструктор с двумя параметрами
        /// </summary>
        /// <param name="excelentpupli"></param>
        /// <param name="goodpupli"></param>
        public ClassRoom(Pupil excelentpupli, Pupil goodpupli)
        {

        }

        /// <summary>
        /// Конструктор с тремя параметрами
        /// </summary>
        /// <param name="excelentpupli"></param>
        /// <param name="goodpupli"></param>
        /// <param name="badpupli"></param>
        public ClassRoom(Pupil excelentpupli, Pupil goodpupli, Pupil badpupli)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pupil"></param>
        public void Info(Pupil pupil)
        {
            Console.WriteLine($"Ученик {pupil.FinalyName}: ");
            pupil.Study();
            pupil.Read();
            pupil.Write();
            pupil.Relax();
            Console.WriteLine();
        }
    }
}

    /// <summary>
    /// Абстрактный класс Pupli
    /// </summary>
    abstract class Pupil
    {
        /// <summary>
        /// Свойство FinalyName
        /// </summary>
        public string FinalyName { get; set; }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Pupil()
        {

        }

        /// <summary>
        /// Конструктор с одним параметром
        /// </summary>
        /// <param name="finalyname">фамилия</param>
        public Pupil(string finalyname)
        {
            FinalyName = finalyname;
        }

        /// <summary>
        /// Абстрактный метод Study
        /// </summary>
        public abstract void Study();

        /// <summary>
        /// Абстрактный метод Read
        /// </summary>
        public abstract void Read();

        /// <summary>
        /// Абстрактный метод Write
        /// </summary>
        public abstract void Write();

        /// <summary>
        /// Абстрактный метод Relax
        /// </summary>
        public abstract void Relax();
    }
}

    /// <summary>
    /// Класс 
    /// </summary>
    class ExcelentPupli : Pupil
    {
        public ExcelentPupli()
        {

        }

        public ExcelentPupli(string finalyname)
         :base(finalyname)
        {

        }

        public override void Study()
        {
            Console.WriteLine($"{FinalyName} учится отлично!");
        }

        public override void Read()
        {
            Console.WriteLine($"{FinalyName} читает очень быстро!");
        }

        public override void Write()
        {
            Console.WriteLine($"{FinalyName} пишет без ошибок!");
        }

        public override void Relax()
        {
            Console.WriteLine($"{FinalyName} отдыхает, играя в шахматы!");
        }
    }
}

    class GoodPupli : Pupil
    {
        public GoodPupli()
        {

        }

        public GoodPupli(string finalyname)
        :base(finalyname)
        {

        }

        public override void Study()
        {
            Console.WriteLine($"{FinalyName} учится хорошо!");
        }

        public override void Read()
        {
            Console.WriteLine($"{FinalyName} читает достаточно быстро!");
        }

        public override void Write()
        {
            Console.WriteLine($"{FinalyName} пишет с небольшими ошибками!");
        }

        public override void Relax()
        {
            Console.WriteLine($"{FinalyName} отдыхает, смотря телевизор!");
        }
    }
}

{
    class BadPupli : Pupil
    {
        public BadPupli()
        {

        }

        public BadPupli(string finalyname)
        :base(finalyname)
        {

        }

        public override void Study()
        {
            Console.WriteLine($"{FinalyName} учится плохо!");
        }

        public override void Read()
        {
            Console.WriteLine($"{FinalyName} читает очень медлено!");
        }

        public override void Write()
        {
            Console.WriteLine($"{FinalyName} пишет с большим количеством ошибок!");
        }

        public override void Relax()
        {
            Console.WriteLine($"{FinalyName} отдыхает, играя в компьютерные игры!");
        }
    }
}

{
    abstract class Vechile
    {
        private int a;
        private int b;
        private int price;
        private int speed;
        private int datayear;

        public Vechile()
        {

        }

        public Vechile(int a, int b, int price, int speed, int datayear)
        {
            this.a = a;
            this.b = b;
            this.price = price;
            this.speed = speed;
            this.datayear = datayear;
        }

        /// <summary>
        /// Свойство A
        /// </summary>
        public int A { get { return a; } set {a = value; } }

        /// <summary>
        /// Свойство B
        /// </summary>
        public int B { get { return b; } set {b = value; } }

        /// <summary>
        /// Свойство 
        /// </summary>
        public int Price { get {return price; } set {price = value; } }
        public int Speed { get { return speed; } set {speed = value; } }
        public int Datayear { get {return datayear; } set { datayear = value; } }

        public abstract void Info();
    }
}

{
    /// <summary>
    /// Абстрактный класс Vehicle
    /// </summary>
    abstract class Vehicle
    {
        /// <summary>
        /// Поле a
        /// </summary>
        private double a;

        /// <summary>
        /// Поле b
        /// </summary>
        private double b;

        /// <summary>
        /// Поле price
        /// </summary>
        private int price;

        /// <summary>
        /// Поле speed
        /// </summary>
        private int speed;

        /// <summary>
        /// Поле datayear
        /// </summary>
        private int datayear;

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Vehicle()
        {

        }

        /// <summary>
        /// Конструктор с пятью параметрами
        /// </summary>
        /// <param name="a">координата a</param>
        /// <param name="b">координата b</param>
        /// <param name="price">цена</param>
        /// <param name="speed">скорость</param>
        /// <param name="datayear">год-издания</param>
        public Vehicle(double a, double b, int price, int speed, int datayear)
        {
            this.a = a;
            this.b = b;
            this.price = price;
            this.speed = speed;
            this.datayear = datayear;
        }

        /// <summary>
        /// Свойство A
        /// </summary>
        public double A { get {return a; } set {a = value; } }

        /// <summary>
        /// Свойство B
        /// </summary>
        public double B { get { return b; } set {b = value; } }

        /// <summary>
        /// Свойство Price
        /// </summary>
        public int Price { get {return price; } set {price = value; } }

        /// <summary>
        /// Свойство Speed
        /// </summary>
        public int Speed { get {return speed; } set {speed = value; } }

        /// <summary>
        /// Свойство Datayear
        /// </summary>
        public int Datayear { get {return datayear; } set {datayear = value; } }

        /// <summary>
        /// Абстрактный метод InfoVehicle
        /// </summary>
        public abstract void InfoVehicle();
    }
}

{
    /// <summary>
    /// Класс Car наследующийся от абстрактного класса Vehicle
    /// </summary>
    class Car : Vehicle
    {
        /// <summary>
        /// Конструктор без парамтеров
        /// </summary>
        public Car()
        {

        }

        /// <summary>
        /// Конструктор с пятью параметрами базавого класса
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <param name="price"></param>
        /// <param name="speed"></param>
        /// <param name="datayear"></param>
        public Car(double a, double b, int price, int speed, int datayear)
        :base(a, b, price, speed, datayear)
        {

        }

        /// <summary>
        /// Переопределённый метод InfoVehicle
        /// </summary>
        public override void InfoVehicle()
        {
            Console.WriteLine($"Машина Тайота:\n Координата A - {A}\n Координата B - {B}\n Цена - {Price}\n Скорость - {Speed}\n Год-издания - {Datayear}");
        }
    }
}

{
    /// <summary>
    /// Класс Plane наследующийся от абстрактного класса Vehicle
    /// </summary>
    class Plane : Vehicle
    {
        /// <summary>
        /// Поле h
        /// </summary>
        private int h;

        /// <summary>
        /// Поле kolv
        /// </summary>
        private int kolv;

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Plane()
        {

        }

        /// <summary>
        /// Конструктор с двумя параметрами данного класса, и пятью базового класса
        /// </summary>
        /// <param name="a">координата a</param>
        /// <param name="b">координата b</param>
        /// <param name="price">цена</param>
        /// <param name="speed">скорость</param>
        /// <param name="datayear">год-издания</param>
        /// <param name="h">высота</param>
        /// <param name="kolv">количество-пассажиров</param>
        public Plane(double a, double b, int price, int speed, int datayear, int h, int kolv)
        :base(a, b, price, speed, datayear)
        {
            this.h = h;
            this.kolv = kolv;
        }

        /// <summary>
        /// Свойство H
        /// </summary>
        public int H { get {return h; } set {h = value; } }

        /// <summary>
        /// Свойтсво Kolv
        /// </summary>
        public int Kolv { get {return kolv; } set {kolv = value; } }

        /// <summary>
        /// Переопределённый метод InfoVehicle
        /// </summary>
        public override void InfoVehicle()
        {
            string name = "Юпитер";
            Console.Write($"Самолёт - {name}\n");
            Console.Write($"Координата A - {A}\n Координата B - {B}\n Цена - {Price}\n Скорость - {Speed}\n Год-издания - {Datayear}\n Высота - {H}\n Количество пассажиров - {Kolv}");
        }
    }
}

{
    /// <summary>
    /// Абстрактный класс Tovar
    /// </summary>
    abstract class Tovar
    {
        private string name;
        private double price;
        /// <summary>
        /// Свойство Name
        /// </summary>
        public string Name { get {return name; } set {name = value; } }

        /// <summary>
        /// Свойство Price
        /// </summary>
        public double Price { get {return price; } set {price = value; } }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Tovar()
        {

        }

        /// <summary>
        /// Конструктор с двумя параметрами
        /// </summary>
        /// <param name="name">название</param>
        /// <param name="price">цена</param>
        public Tovar(string name, double price)
        {
            Name = name;
            Price = price;
        }

        /// <summary>
        /// Абстрактный метод CalcSum
        /// </summary>
        /// <returns>Рассчитывает стоимость</returns>
        public abstract double CalcSum();

        /// <summary>
        /// Метод для вывода информации по товару.
        /// </summary>
        public void Print()
        {
            Console.WriteLine($"Информация по товару - {Name}: \nЦена - {CalcSum()}");
        }
    }
}

{
    /// <summary>
    /// Класс Obuv наследующийся от абстрактного класса Tovar
    /// </summary>
    class Obuv : Tovar
    {
        /// <summary>
        /// Поле kolv
        /// </summary>
        private int kolv;

        /// <summary>
        /// Поле razmer
        /// </summary>
        private double razmer;

        /// <summary>
        /// Поле mass
        /// </summary>
        private double mass;

        /// <summary>
        /// Поле color
        /// </summary>
        private string color;

        /// <summary>
        /// Свойство Kolv
        /// </summary>
        public int Kolv { get {return kolv; } set {kolv = value; } }

        /// <summary>
        /// Свойство Razmer
        /// </summary>
        public double Razmer 
        { get {return razmer; } 
          set 
          {
                if (value < 30)
                {
                    Console.WriteLine("Это детская обувь.");
                }

                else if (value < 25)
                {
                    Console.WriteLine("Обувь не может быть меньшего размера.");
                }

                if (value > 30)
                {
                    Console.WriteLine("Это обувь обычного размера.");
                }

                else if(value >= 40)
                {
                    Console.WriteLine("Это обувь взрослого размера.");
                }

                else if (value >= 55 || value <= 60)
                {
                    Console.WriteLine("Это максимальные размеры");
                }

                else
                {
                    Console.WriteLine("Вы указали не верное значение");
                }
          } 
        }

        /// <summary>
        /// Свойство Mass
        /// </summary>
        public double Mass { get {return mass; } set {mass = value; } }

        /// <summary>
        /// Свойство Color
        /// </summary>
        public string Color { get {return color; } set {color = value; } }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Obuv()
        {

        }

        /// <summary>
        /// Конструктор с тремя параметрами данного класса, и двумя базового класса
        /// </summary>
        /// <param name="name">название</param>
        /// <param name="price">цена</param>
        /// <param name="kolv">количество</param>
        /// <param name="razmer">размер</param>
        /// <param name="mass">масса</param>
        /// <param name="color">цвет</param>
        public Obuv(string name, double price, int kolv, double razmer, double mass, string color)
        :base(name, price)
        {
            Kolv = kolv;
            Razmer = razmer;
            Mass = mass;
            Color = color;
        }

        /// <summary>
        /// Переопределённый метод CalcSum
        /// </summary>
        /// <returns>Расчёт суммы</returns>
        public override double CalcSum()
        {
            int sebest = 100 - Kolv;
            return Price = Math.Sqrt(sebest+100+40+0.54);
        }

        /// <summary>
        /// Метод для вывода информации по товару
        /// </summary>
        /// <param name="tovar">товар</param>
        public void Print(Tovar tovar)
        {
            string name = $"Количество - {Kolv}, Размер - {Razmer}, Масса - {Mass}, Цвет - {Color}";
            tovar.Print();
        }
    }
}

{
    /// <summary>
    /// Класс Odejda наследующийся от абстрактного класса Tovar
    /// </summary>
    class Odejda : Tovar
    {
        /// <summary>
        /// Поле kolv
        /// </summary>
        private int kolv;

        /// <summary>
        /// Поле razmer
        /// </summary>
        private double razmer;

        /// <summary>
        /// Поле mass
        /// </summary>
        private double mass;

        /// <summary>
        /// Поле color
        /// </summary>
        private string color;

        /// <summary>
        /// Свойство Kolv
        /// </summary>
        public int Kolv { get { return kolv; } set { kolv = value; } }

        /// <summary>
        /// Свойство Razmer
        /// </summary>
        public double Razmer
        {
            get { return razmer; }
            set
            {
                if (value < 30)
                {
                    Console.WriteLine("Это детская одежда.");
                }

                else if (value < 20)
                {
                    Console.WriteLine("Это одежда на маленьких.");
                }

                if (value > 30)
                {
                    Console.WriteLine("Это одежда обычного размера.");
                }

                else if (value >= 50)
                {
                    Console.WriteLine("Это одежда взрослого размера.");
                }

                else if (value >= 65 || value <= 80)
                {
                    Console.WriteLine("Это максимальные размеры");
                }

                else
                {
                    Console.WriteLine("Вы указали не верное значение");
                }
            }
        }

        /// <summary>
        /// Свойство Mass
        /// </summary>
        public double Mass { get { return mass; } set { mass = value; } }

        /// <summary>
        /// Свойство Color
        /// </summary>
        public string Color { get { return color; } set { color = value; } }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Odejda()
        {

        }

        /// <summary>
        /// Конструктор с тремя параметрами данного класса, и двумя базового класса
        /// </summary>
        /// <param name="name">название</param>
        /// <param name="price">цена</param>
        /// <param name="kolv">количество</param>
        /// <param name="razmer">размер</param>
        /// <param name="mass">масса</param>
        /// <param name="color">цвет</param>
        public Odejda(string name, double price, int kolv, double razmer, double mass, string color)
        : base(name, price)
        {
            Kolv = kolv;
            Razmer = razmer;
            Mass = mass;
            Color = color;
        }

        /// <summary>
        /// Переопределённый метод CalcSum
        /// </summary>
        /// <returns>Расчёт суммы</returns>
        public override double CalcSum()
        {
            int sebest = 100 - Kolv;
            return Price = Math.Sqrt(sebest + 50% + 14 + 0.32);
        }

        /// <summary>
        /// Метод для вывода информации по товару
        /// </summary>
        /// <param name="tovar">товар</param>
        public void Print(Tovar tovar)
        {
            tovar.Print();
            Console.WriteLine($"Количество - {Kolv}, Размер - {Razmer}, Масса - {Mass}, Цвет - {Color}");
        }
    }
}

{
    class Posuda : Tovar
    {
        /// <summary>
        /// Поле kolv
        /// </summary>
        private int kolv;

        /// <summary>
        /// Поле razmer
        /// </summary>
        private double razmer;

        /// <summary>
        /// Поле mass
        /// </summary>
        private double mass;

        /// <summary>
        /// Поле color
        /// </summary>
        private string color;

        /// <summary>
        /// Свойство Kolv
        /// </summary>
        public int Kolv { get { return kolv; } set { kolv = value; } }

        /// <summary>
        /// Свойство Razmer
        /// </summary>
        public double Razmer
        {
            get { return razmer; }
            set
            {
                if (value >= 3 || value <= 11)
                {
                    Console.WriteLine($"Ваш размер {razmer = value}");
                }

                else
                {
                    Console.WriteLine("Вы указали не верное значение");
                }
            }
        }

        /// <summary>
        /// Свойство Mass
        /// </summary>
        public double Mass { get { return mass; } set { mass = value; } }

        /// <summary>
        /// Свойство Color
        /// </summary>
        public string Color { get { return color; } set { color = value; } }

        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Posuda()
        {

        }

        /// <summary>
        /// Конструктор с тремя параметрами данного класса, и двумя базового класса
        /// </summary>
        /// <param name="name">название</param>
        /// <param name="price">цена</param>
        /// <param name="kolv">количество</param>
        /// <param name="razmer">размер</param>
        /// <param name="mass">масса</param>
        /// <param name="color">цвет</param>
        public Posuda(string name, double price, int kolv, double razmer, double mass, string color)
        : base(name, price)
        {
            Kolv = kolv;
            Razmer = razmer;
            Mass = mass;
            Color = color;
        }

        /// <summary>
        /// Переопределённый метод CalcSum
        /// </summary>
        /// <returns>Расчёт суммы</returns>
        public override double CalcSum()
        {
            int sebest = 100 - Kolv;
            return Price = Math.Sqrt(sebest + 60% + 30 + 0.37);
        }

        /// <summary>
        /// Метод для вывода информации по товару
        /// </summary>
        /// <param name="tovar">товар</param>
        public void Print(Tovar tovar)
        {
            tovar.Print();
            Console.WriteLine($"Количество - {Kolv}, Размер - {Razmer}, Масса - {Mass}, Цвет - {Color}");
        }
    }
}

{
    /// <summary>
    /// Абстрактный класс Person
    /// </summary>
    abstract class Person
    {
        /// <summary>
        /// Свойство Name
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Абстрактный метод SayHello
        /// </summary>
        public abstract void SayHello();
    }
}

{
    /// <summary>
    /// Класс Russian наследующийся от абстрактного класса Person
    /// </summary>
    class Russian : Person
    {
        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Russian()
        {

        }

        /// <summary>
        /// Конструктор с одним параметром
        /// </summary>
        /// <param name="name"></param>
        public Russian(string name)
        {
            Name = name;
        }

        /// <summary>
        /// Переопределённый метод SayHello
        /// </summary>
        public override void SayHello()
        {
            Console.WriteLine($"Национальность: {Name}-Привет");
        }
    }
}

{
    /// <summary>
    /// Класс Ukrain наследующийся от абстрактного класса Person
    /// </summary>
    class Ukrain : Person
    {
        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public Ukrain()
        {

        }

        /// <summary>
        /// Конструктор с одним параметром
        /// </summary>
        /// <param name="name"></param>
        public Ukrain(string name)
        {
            Name = name;
        }

        /// <summary>
        /// Переопределённый метод SayHello
        /// </summary>
        public override void SayHello()
        {
            Console.WriteLine($"Национальность: {Name}-Merhaba");
        }
    }
}

{
    /// <summary>
    /// Класс American наследующийся от абстрактного класса Person
    /// </summary>
    class American : Person
    {
        /// <summary>
        /// Конструктор без параметров
        /// </summary>
        public American()
        {

        }

        /// <summary>
        /// Конструктор с одним параметром
        /// </summary>
        /// <param name="name"></param>
        public American(string name)
        {
            Name = name;
        }

        /// <summary>
        /// Переопределённый метод SayHello
        /// </summary>
        public override void SayHello()
        {
            Console.WriteLine($"Национальность: {Name}-Hi");
        }
    }
}

{
    class Program
    {
        static void Main(string[] args)
        {
            //1-Задание
            //Pupil pupil = new ExcelentPupli("Петров");
            //Pupil pupil1 = new GoodPupli("Иванов");
            //Pupil pupil2 = new BadPupli("Сидоров");
            //ClassRoom classRoom = new ClassRoom();
            //classRoom.Info(pupil);
            //classRoom.Info(pupil1);
            //classRoom.Info(pupil2);

            //2-Задание
            Plane vehicle = new Plane();
            Ship vehicle1 = new Ship();
            Car vehicle2 = new Car();
            while (true)
            {
                Console.WriteLine("Вам представлен ряд из трёх транспортных средств.");
                Console.Write("1)Машина, 2)Самолёт, 3)Корабль.");
                Console.WriteLine(" Выберите одно из транспортных средств и опишите его.");
                Console.WriteLine("Однако если не желаете описывать, можете ввести 4)Выход, и программа закроется");
                string choise = Console.ReadLine();
                switch (choise.ToLower())
                {
                    case "1":
                        Console.Clear();
                        Console.Write("Введите координату A: ");
                        vehicle2.A = Convert.ToInt32(Console.ReadLine());
                        Console.Write("Введите координату B: ");
                        vehicle2.B = Convert.ToInt32(Console.ReadLine());
                        Console.Write("Введите Цену: ");
                        vehicle2.Price = int.Parse(Console.ReadLine());
                        Console.Write("Введите Скорость: ");
                        vehicle2.Speed = int.Parse(Console.ReadLine());
                        Console.Write("Введите Год-издания: ");
                        vehicle2.Datayear = int.Parse(Console.ReadLine());
                        vehicle2.InfoVehicle();
                        continue;

                    case "2":
                        Console.Clear();
                        Console.Write("Введите координату A: ");
                        vehicle.A = Convert.ToInt32(Console.ReadLine());
                        Console.Write("Введите координату B: ");
                        vehicle.B = Convert.ToInt32(Console.ReadLine());
                        Console.Write("Введите Цену: ");
                        vehicle.Price = int.Parse(Console.ReadLine());
                        Console.Write("Введите Скорость: ");
                        vehicle.Speed = int.Parse(Console.ReadLine());
                        Console.Write("Введите Год-издания: ");
                        vehicle.Datayear = int.Parse(Console.ReadLine());
                        Console.Write("Введите высоту: ");
                        vehicle.H = int.Parse(Console.ReadLine());
                        Console.Write("Введите количество-пассажиров: ");
                        vehicle.Kolv = int.Parse(Console.ReadLine());
                        vehicle.InfoVehicle();
                        continue;

                    case "3":
                        Console.Clear();
                        Console.Write("Введите координату A: ");
                        vehicle1.A = Convert.ToInt32(Console.ReadLine());
                        Console.Write("Введите координату B: ");
                        vehicle1.B = Convert.ToInt32(Console.ReadLine());
                        Console.Write("Введите Цену: ");
                        vehicle1.Price = int.Parse(Console.ReadLine());
                        Console.Write("Введите Скорость: ");
                        vehicle1.Speed = int.Parse(Console.ReadLine());
                        Console.Write("Введите Год-издания: ");
                        vehicle1.Datayear = int.Parse(Console.ReadLine());
                        Console.Write("Введите количество-пассажиров: ");
                        vehicle1.Kolv = int.Parse(Console.ReadLine());
                        Console.Write("Введите название порта: ");
                        vehicle1.Portname = Console.ReadLine();
                        vehicle1.InfoVehicle();
                        continue;

                    case "4":
                        Console.Clear();
                        break;
                }
                break;

            //3-Задание
            Obuv obuv = new Obuv();
            Odejda odejda = new Odejda();
            Posuda posuda = new Posuda();
            Tovar tovar = new Obuv();
            Tovar tovar1 = new Odejda();
            Tovar tovar2 = new Posuda();

            Console.WriteLine("У вас есть 3 вариации товара: 1)Обувь, 2)Одежда, 3)Посуда.");
            while (true)
            {
                Console.WriteLine("Выберите какой товар хотите указать: ");
                string choise = Console.ReadLine();
                switch (choise.ToLower())
                {
                    case "обувь":
                        Console.WriteLine($"Вы выбрали - {choise}");
                        obuv.Name = choise;
                        Console.WriteLine("Теперь укажите информацию по нему.");
                        Console.WriteLine("Введите количество товара: ");
                        obuv.Kolv = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите размер: ");
                        obuv.Razmer = double.Parse(Console.ReadLine());
                        Console.WriteLine("Введите массу: ");
                        obuv.Mass = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите цвет: ");
                        obuv.Color = Console.ReadLine();
                        obuv.Print(tovar);
                        continue;

                    case "одежда":
                        Console.WriteLine($"Вы выбрали - {choise}");
                        odejda.Name = choise;
                        Console.WriteLine("Теперь укажите информацию по нему.");
                        Console.WriteLine("Введите количество товара: ");
                        odejda.Kolv = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите размер: ");
                        odejda.Razmer = double.Parse(Console.ReadLine());
                        Console.WriteLine("Введите массу: ");
                        odejda.Mass = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите цвет: ");
                        odejda.Color = Console.ReadLine();
                        odejda.Print(tovar1);
                        continue;

                    case "посуда":
                        Console.WriteLine($"Вы выбрали - {choise}");
                        posuda.Name = choise;
                        Console.WriteLine("Теперь укажите информацию по нему.");
                        Console.WriteLine("Введите количество товара: ");
                        posuda.Kolv = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите размер: ");
                        posuda.Razmer = double.Parse(Console.ReadLine());
                        Console.WriteLine("Введите массу: ");
                        posuda.Mass = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите цвет: ");
                        posuda.Color = Console.ReadLine();
                        posuda.Print(tovar2);
                        continue;

                    default:
                        Console.WriteLine("Вы указали не верно товар.");
                        continue;
                }

            //4-Задание
            Russian russian = new Russian();
            Ukrain ukrain = new Ukrain();
            American american = new American();
            Console.WriteLine("Введите тот язык на котором хотите сказать привествие: ");
            Console.WriteLine("1)Русский; 2)Украинец; 3)Англичанин.");
            string name = Console.ReadLine();
            if (name == "Русский")
            {
                russian.Name = name;
                russian.SayHello();
            }

            else if (name == "Украинец")
            {
                ukrain.Name = name;
                ukrain.SayHello();
            }

            else if (name == "Англичанин")
            {
                american.Name = name;
                american.SayHello();
            }
            Console.ReadKey();
        }
    }
}
